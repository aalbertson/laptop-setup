- name: Fetch homebrew installer
  get_url:
    url: https://raw.githubusercontent.com/Homebrew/install/master/install
    dest: "/tmp/homebrew-install.rb"

- name: Install homebrew
  shell: ruby "/tmp/homebrew-install.rb"
  args:
    creates: "/usr/local/Homebrew/.git"

- name: Ensure that shell RC file exists
  file:
    path: "{{ shell_rc }}"
    state: touch

- name: Setup shell variables
  blockinfile:
    dest: "{{ shell_rc }}"
    block: |
      # Add homebrew binaries to the path.
      export PATH="/usr/local/bin:${PATH?}"

      # Force certain more-secure behaviours from homebrew
      export HOMEBREW_NO_INSECURE_REDIRECT=1
      export HOMEBREW_CASK_OPTS=--require-sha

      # Load ruby shims
      eval "$(rbenv init -)"

      # Prefer GNU binaries to Macintosh binaries.
      export PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"

      # Add devtools binaries to the PATH
      export PATH="${HOME?}/wrk/devtools/bin:${PATH?}"

      # Point GOPATH to our go sources
      export GOPATH="${HOME?}/go"

      # Point WORKING_ROOT to ~/wrk symlink
      export WORKING_ROOT="${HOME?}/wrk"

      # Tell the devenv vm to mount $GOPATH/src rather than just dd-go
      export MOUNT_ALL_GO_SRC=1

      # store key in the login keychain instead of aws-vault managing a hidden keychain
      export AWS_VAULT_KEYCHAIN_NAME=login

      # tweak session times so you don't have to re-enter passwords every 5min
      export AWS_SESSION_TTL=24h
      export AWS_ASSUME_ROLE_TTL=1h


# - name: Ensure SSH config file exists
#   file:
#     path: "{{ ssh_config }}"
#     state: touch
#     # Recommended perms for .ssh/config
    # mode: 0644

# - name: Setup SSH config
#   blockinfile:
#     dest: "{{ ssh_config }}"
#     block: |
#       Host *
#       # IPv4 only for speed
#       AddressFamily inet
#       Compression yes
#       ControlMaster auto
#       ControlPath /tmp/ssh_mux_%h_%p_%r
#       ControlPersist 10m
#       # send a keep-alive after 30s of inactivity
#       ServerAliveInterval 30

- name: Update homebrew
  homebrew:
    update_homebrew: yes

- name: Install GNU bash/coreutils
  homebrew:
    name: "{{ item }}"
  loop:
    - bash
    - coreutils

- name: Install homebrew python
  homebrew:
    name: python@2

# TODO: Figure out a file this creates, then add args: creates: ...
- name: Install virtualenv
  pip:
    name: virtualenv

- name: Install golang
  homebrew:
    name: "{{ item }}"
  loop:
    - golang
    - gimme

- name: Install useful tools
  homebrew:
    name: "{{ item }}"
    # name: [u'git', u'jq', u'gcc', u'make', u'gpg2', u'pinentry', u'tfenv', u'mackup']
  loop:
    - git
    - jq
    - gcc
    - make
    - gpg2
    - pinentry
    - tfenv # needed for cloudops
    - mackup

# - name: Create DataDog golang directory structure
#   file:
#     path: "{{ homedir }}/go/src/github.com/DataDog"
#     state: directory

# - name: Create ~/wrk symlink
#   file:
#     path: "{{ homedir }}/wrk"
#     state: link
#     src: "{{ homedir }}/go/src/github.com/DataDog"

# - name: Clone Repos
#   git:
#     repo: "git@github.com:DataDog/{{ item }}"
#     dest: "{{ homedir }}/go/src/github.com/DataDog/{{ item }}"
#     key_file: "{{ homedir }}/.ssh/id_rsa"
#     update: no
#   with_items:
#     - architecture
#     - consul-config
#     - datacenter-config
#     - datastores
#     - devtools
#     - dogweb
#     - dd-go
#     - devops
#     - cloudops
#     - images
#     - k8s-resources
#     - logs-backend

- name: Install aws-vault tool
  homebrew_cask:
    name: aws-vault

- name: Make ~/.aws Directory
  file:
    path: "{{ homedir }}/.aws"
    state: directory

# - name: Setup AWS Vault Credentials
#   shell: "{{ homedir }}/go/src/github.com/DataDog/devtools/bin/setup-awsconfig ${USER?} > {{ homedir }}/.aws/config"
#   args:
#     creates: "{{ homedir }}/.aws/config"

# - name: Install rbenv
#   homebrew:
#     name: rbenv

# - name: Install ruby version
#   shell: rbenv install "{{ ruby_version }}"
#   args:
#     creates: "{{ homedir }}/.rbenv/versions/{{ ruby_version }}"

# - name: Determine current ruby version
#   shell: rbenv version
#   register: rbenv_version

# - name: Set ruby version
#   shell: rbenv global "{{ ruby_version }}"
#   when: rbenv_version.stdout.split(' ')[0] != ruby_version

# - name: Install ruby bundler
#   gem:
#     name: bundler
    # executable: "{{ homedir }}/.rbenv/versions/{{ ruby_version }}/bin/gem"

- name: Install virtualbox and vagrant
  homebrew_cask:
    name: "{{ item }}"
  with_items:
    - virtualbox
    - vagrant

# - name: Install dogbox
#   shell: vagrant init datadog/dogbox https://corgi.ddbuild.io/release.json
#   args:
#     chdir: "{{ homedir }}/dd"
#     creates: "{{ homedir }}/dd/Vagrantfile"
